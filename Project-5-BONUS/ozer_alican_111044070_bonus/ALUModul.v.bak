module ALUModul(input [5:0] OPCode,FCode,
	input [4:0] Shamt,
	input [31:0] Rs,Rt,Immediate,
	output [31:0] Result,
	output Zero,Carry,OverFlow);
	//sonucu seçmek için
	wire [31:0] Add,Sub,And,Or,Sra,Srl,Sll,Sllv,Slt;
	wire [31:0] Addi,Addiu,Andi,Ori,Lui,Slti,Sltiu,Beq,Bne,Lw,Sw;
	wire OFAdd,OFSub,OFAddi,OFAddiu;
	//ara işlemler için
	wire [31:0] UnsignedImm;
	wire cout1,cout2,cout3;
	
	//R-TYPE ların fonksiyon kodları
	parameter R_TYPE=6'b000000;
	parameter ADD = 6'b100000;
	parameter SUB = 6'b100010;
	parameter AND = 6'b100100;
	parameter OR  = 6'b100101;
	parameter SRA = 6'b000011;
	parameter SRL = 6'b000010;
	parameter SLL = 6'b000000;
	parameter SLLV= 6'b000100;
	parameter SLT = 6'b101010;
	
	//I-TYPE ların opcodları
	parameter ADDI = 6'b001000;
	parameter ADDIU= 6'b001001;
	parameter ANDI = 6'b001100;
	parameter ORI  = 6'b001101;
	parameter LUI  = 6'b001111;
	parameter SLTIU= 6'b001011;
	parameter SLTI = 6'b001010;
	parameter BEQ  = 6'b000100;
	parameter BNE  = 6'b000101;
	parameter LW   = 6'b100011;
	parameter SW   = 6'b101011;
	//jump opcode
	parameter JUMP = 6'b000010;
	
	//immediate 32 bitin unsigned 32 bit sekildeki hali
	assign UnsignedImm = {{16{1'b0}},Immediate[15:0]};
	//cout ve toplam eğer signed sistem ise
	assign {cout1,Addi} = Rs + Immediate;
	//cout ve toplam eğer unsigned sistem ise
	assign {cout2,Addiu} = Rs + Immediate;
	//cout ve toplam eğer unsigned sistem ise
	assign {cout3,Add} = Rs + Rt;
	
	//elde çıkışını hangi toplama işlemine olduğunun seçimi
	assign Carry = (OPCode == ADDI) ? cout1:
							(OPCode == ADDIU) ? cout2 :
							(FCode == ADD) ? cout3:1'b0;
		
	//tüm işlemler yapılır
	assign Sub = Rs - Rt;
	assign And = Rs & Rt;
	assign Or  = Rs | Rt;
	shiftRA _SRA(Rt,Shamt,Sra);//sra negatif
	assign Srl = Rt >> Shamt;
	assign Sll = Rt << Shamt;
	assign Sllv= Rt << Rs;
	setOnLessThan _SLT(Rs,Rt,Slt);
	assign Andi = Rs & Immediate;
	assign Ori  = Rs | Immediate;
	assign Lui = {Immediate[31:16],16'b0};	
	setOnLessThan _SLTI(Rs,Immediate,Slti);
	setOnLessThan _SLTIU(Rs,UnsignedImm,Sltiu);	
	assign Beq = Rs - Rt;
	assign Bne = Rs - Rt;
	assign Lw  = Rs + Immediate;
	assign Sw  = Rs + Immediate;
	//overflow controlleri
	assign OFAdd = ((Rs[31] == Rt[31]) && (Add[31] != Rs[31])) ? 1'b1 : 1'b0;
	assign OFSub = ((Rs[31] == Rt[31]) && (Sub[31] != Rs[31])) ? 1'b1 : 1'b0;
	assign OFAddi = ((Rs[31] == Immediate[31]) && (Addi[31] != Rs[31])) ? 1'b1 : 1'b0;
	assign OFAddiu = ((Rs[31] == Immediate[31]) && (Addiu[31] != Rs[31])) ? 1'b1 : 1'b0;
	assign OverFlow =
		(OPCode==R_TYPE && FCode == ADD) ? OFAdd:
		(OPCode==R_TYPE && FCode == SUB) ? OFSub:
		(OPCode==ADDI) ? OFAddi:
		(OPCode==ADDIU) ? OFAddiu: 1'b0;
	//istenilen degeri cıkısa ver
	assign Result=
		(OPCode==R_TYPE && FCode == ADD) ? Add:
		(OPCode==R_TYPE && FCode == SUB) ? Sub:
		(OPCode==R_TYPE && FCode == AND) ? And:
		(OPCode==R_TYPE && FCode == OR) ? Or:
		(OPCode==R_TYPE && FCode == SRA) ? Sra:
		(OPCode==R_TYPE && FCode == SRL) ? Srl:
		(OPCode==R_TYPE && FCode == SLL) ? Sll:
		(OPCode==R_TYPE && FCode == SLLV) ? Sllv:
		(OPCode==R_TYPE && FCode == SLT) ? Slt:
		(OPCode==ADDI) ? Addi:
		(OPCode==ADDIU) ? Addiu:
		(OPCode==ANDI) ? Andi:
		(OPCode==ORI) ? Ori:
		(OPCode==LUI) ? Lui:
		(OPCode==SLTIU) ? Sltiu:
		(OPCode==SLTI) ? Slti:
		(OPCode==BEQ) ? Beq:
		(OPCode==BNE) ? Bne:
		(OPCode==LW) ? Lw:
		(OPCode==SW) ? Sw:	Rs;//yoksa rs doner
		
	assign Zero = (Result == 32'b0) ? 1'b1: 1'b0;
endmodule

module shiftRA(input [31:0] inner, input [4:0] shamt, output [31:0] result);

	wire [31:0] s0, s1, s2, s3, inverseA;
	assign inverseA = ~inner;
	assign s0 = (shamt[0] ? {inner[31], inner} >> 1 : inner);
	assign s1 = ~(shamt[1] ? {{2{inner[31]}}, s0} >> 2 : s0);
	assign s2 = ~(shamt[2] ? {{4{inverseA[31]}}, s1} >> 4 : s1);
	assign s3 = ~(shamt[3] ? {{8{inner[31]}}, s2} >> 8 : s2);
	assign result = ~(shamt[4] ? {{16{inverseA[31]}}, s3} >> 16 : s3);
endmodule

module setOnLessThan(input [31:0] first,second,output [31:0]out);
	wire [31:0] overFlow,Sub;
	wire sout;
	assign Sub = first - second;
	assign overFlow = ((first[31] == second[31]) && (Sub[31] != first[31])) ? 1'b1 : 1'b0;
	assign sout = overFlow ? ~(first[31]) : first[31];
	assign out = {31'd0,sout};

endmodule
